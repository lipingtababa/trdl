name: Provision service
run-name: Provisioning ${{ github.repository }}
permissions:
    id-token: write
    contents: read
on: 
  # Deploy ECS cluster, ECS service and dependencies(DB) for an environment    
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT: 339713007259
  STAGE: dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get repo
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/github-actions-admin"
          role-session-name: github
          aws-region: ${{ env.AWS_REGION }}
      
      - name: linting and unit testing
        run: |
          echo "Running linting"
          yarn install
          yarn lint

      - name: Prepare environment
        run: |
          echo ${{ env.AWS_REGION }}
          echo ${{ env.AWS_ACCOUNT }}
          echo ${{ env.STAGE }}

          # set environment variables for the next steps
          APP_NAME=`echo ${{ github.repository }} | cut -d'/' -f2`
          echo "APP_NAME=${APP_NAME}"
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV

          APP_VERSION=`echo ${{ github.sha }} | cut -c1-7`
          echo "APP_VERSION=${APP_VERSION}"
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: create shared resources
        run: |
          cd infrastructure/shared
          sed "s|APP_NAME_PLACEHOLDER|$APP_NAME|g" provider.tf.tpl > provider.tf
          terraform init
          terraform apply -auto-approve \
                -var "app_name=${{ env.APP_NAME }}"

      - name: push image to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker build -t ${{ env.APP_NAME }} .
          docker tag ${{ env.APP_NAME }}:latest ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          docker push                           ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}:${{ env.APP_VERSION }}

      - name: Update infrastructure and service
        run: |
          cd infrastructure/service
          sed "s|APP_NAME_PLACEHOLDER|$APP_NAME|g" provider.tf.tpl > provider.tf
          terraform init
          terraform apply -auto-approve \
                -var "aws_region=${{ env.AWS_REGION }}" \
                -var "aws_account=${{ env.AWS_ACCOUNT }}" \
                -var "stage=${{ env.STAGE}}" \
                -var "app_version=${{ env.APP_VERSION }}" \
                -var "app_name=${{ env.APP_NAME }}"

      - name: run e2e test suite
        run: |
          # wait for 1 minite for new version to be deployed. TODO: replace with a better solution
          sleep 60
          cd test/e2e
          # fetch the lb address from parameter store
          LB_ADDRESS=$(aws ssm get-parameter --name /${{ env.APP_NAME }}/lb/address --region ${{ env.AWS_REGION }} --query 'Parameter.Value' --output text)
          
          # Run the e2e test suite in a docker container
          docker build . -t bullets-client
          docker run -d --env "LB_ADDRESS=$LB_ADDRESS" --name client bullets-client
          sleep 10
          docker logs client > ./bullets.log
          cat ./bullets.log
          grep 'Successful' ./bullets.log | awk -F': ' '{print $2}' | awk '{print $1}' > success.log
          while IFS= read -r line
          do
            if (( $(echo "$line > 98" | bc -l) )); then
              echo "$line is greater than 98"
            else
              echo "$line is not greater than 98"
              exit 1
            fi
          done < success.log
